<?php

/**
 * @file
 * The BLP Flex Groups Core.
 */

use Drupal\block\Entity\Block;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\group\Entity\Group;
use Drupal\group\Entity\GroupInterface;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\Plugin\views\row\EntityRow;
use Drupal\views\ViewExecutable;
use Drupal\views\Views;
use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Url;
use Drupal\blp_flex_groups\EntityAccessHelper;
use Drupal\node\NodeInterface;

 /**
 * Helper function to get Flexible group types
 */
function blp_flex_groups_get_flexible_group_types() {

  $flexible_group_types = [
    'flexible_group'
  ];

  // Add blp_project group to $flexible_group_types 
  if (\Drupal::moduleHandler()->moduleExists('blp_flex_groups_project')) {
    array_push($flexible_group_types, 'blp_project');
  }

  // Add blp_event group to $flexible_group_types 
  if (\Drupal::moduleHandler()->moduleExists('blp_flex_groups_event_series')) {
    array_push($flexible_group_types, 'blp_event');
  }

  return $flexible_group_types;

}

 /**
 * Helper function to get All group types
 */
function blp_flex_groups_get_group_types() {

  $group_types = [
    'flexible_group',
    'closed_group',
    'open_group'
  ];

  // Add secret group to $group_types
  if (\Drupal::moduleHandler()->moduleExists('social_group_secret')) {
    array_push($group_types, 'secret_group');
  }

  // Add blp_project group to $group_types  
  if (\Drupal::moduleHandler()->moduleExists('blp_flex_groups_project')) {
    array_push($group_types, 'blp_project');
  }

  // Add blp_event group to $group_types 
  if (\Drupal::moduleHandler()->moduleExists('blp_flex_groups_event_series')) {
    array_push($group_types, 'blp_event');
  }

  return $group_types;

}

/**
 * Implements hook_menu_local_actions_alter().
 */
function blp_flex_groups_menu_local_actions_alter(&$local_actions) {
  $group = _social_group_get_current_group();
  $user = \Drupal::currentUser();


  // Remove the social_group add member action on the
  // membership overview if we can't add members directly.
  // SM+ can still add members though.
  if ($group instanceof GroupInterface
    && in_array($group->getGroupType()->id(), 
                blp_flex_groups_get_flexible_group_types())
    && !social_group_flexible_group_can_be_added($group)
    && !$user->hasPermission('manage all groups')
    && !$group->hasPermission('administer members', $user)
  ) {
    unset($local_actions['social_group.add_member']);
  }
}


/**
 * Implements hook_block_access().
 */
function blp_flex_groups_block_access(Block $block, $operation, AccountInterface $account) {
  // This is a list of the blocks that this function cares about, if we're being
  // called for a different block we exit early.
  $block_id = $block->getPluginId();
  $managed_blocks = [
    'views_exposed_filter_block:newest_groups-page_all_groups',
    'views_block:groups-block_user_groups',
    'views_block:upcoming_events-upcoming_events_group',
    'views_block:latest_topics-group_topics_block',
    'views_block:group_managers-block_list_managers',
  ];
  // We don't care for other blocks.
  if (!in_array($block_id, $managed_blocks, FALSE)) {
    return AccessResult::neutral();
  }

  $group = _social_group_get_current_group();
  // We don't care about other group types in here.
  if ($group && in_array($group->getGroupType()->id(),blp_flex_groups_get_flexible_group_types())) {
    // Only when users cant join directly, add the managers block
    // so they know who to contact.
    if ($operation === 'view' &&
      social_group_flexible_group_can_join_directly($group) &&
      $block->getPluginId() === 'views_block:group_managers-block_list_managers') {
      return AccessResult::forbidden();
    }

    // All users with permissions can see the rest.
    if ($account->hasPermission('manage all groups')) {
      return AccessResult::neutral();
    }

    if (!$group->getMember($account) &&
      !social_group_flexible_group_community_enabled($group) &&
      !social_group_flexible_group_public_enabled($group)) {
      // If it is flexible and the current user is not an member of this group,
      // and content visibility is not public and also not community
      // hide it.
      $forbidden_blocks = [
        'views_block:upcoming_events-upcoming_events_group',
        'views_block:latest_topics-group_topics_block',
      ];
      foreach ($forbidden_blocks as $forbidden_block) {
        if ($operation === 'view' && $block->getPluginId() === $forbidden_block) {
          return AccessResult::forbidden();
        }
      }
    }
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_form_alter().
 */
function blp_flex_groups_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  $blp_flex_groups_forms = [];
  $flexible_group_types = blp_flex_groups_get_flexible_group_types();

  foreach($flexible_group_types as $type) {
    array_push($blp_flex_groups_forms, 'group_' . $type . '_edit_form');
    array_push($blp_flex_groups_forms, 'group_' . $type . '_add_form');
  }


  if (in_array($form_id, $blp_flex_groups_forms)) {
    $join_method_default_value = 'added';
    // Ensure we have a better descriptive label.
    if (array_key_exists('added', $form['field_group_allowed_join_method']['widget']['#options'])) {
      $form['field_group_allowed_join_method']['widget']['#options']['added'] = t('Invite-only - users can only join this group if they are added/invited by group managers');
    }
    if (array_key_exists('direct', $form['field_group_allowed_join_method']['widget']['#options'])) {
      $form['field_group_allowed_join_method']['widget']['#options']['direct'] = t('Open to join - users can join this group without approval');
    }
    // If directly exists it's becoming the default.
    if (in_array('direct', $form['field_group_allowed_join_method']['widget']['#default_value'])) {
      $join_method_default_value = 'direct';
    }
    elseif (in_array('request', $form['field_group_allowed_join_method']['widget']['#default_value'])) {
      $join_method_default_value = 'request';
    }
    $form['field_group_allowed_join_method']['widget']['#type'] = 'radios';
    $form['field_group_allowed_join_method']['widget']['#default_value'] = $join_method_default_value;
  }

}

/**
 * Provide a method to alter the allowed content visibility for a group type.
 *
 * @param array $visibilities
 *   The visibilities list.
 * @param string $group_type_id
 *   The group type we alter the visibility setting for.
 *
 * @see social_group_get_allowed_visibility_options_per_group_type()
 *
 * @ingroup social_group_api
 */
function blp_flex_groups_social_group_allowed_visibilities_alter(array &$visibilities, $group_type_id) {
  
  $flexible_group_types = blp_flex_groups_get_flexible_group_types();
  // Remove the default flexible_group
  unset($flexible_group_types['flexible_group']);

  if (in_array($group_type_id,$flexible_group_types)) {

    $group = _social_group_get_current_group();

    if ($group !== NULL) {
      // Set all visibilities for that group to FALSE
      foreach($visibilities as $visibility => $value) {
        $visibilities[$visibility] = FALSE;
      }
            
      // Try to retrieve allowed options from Group directly.
      $allowed_options = $group->get('field_group_allowed_visibility')->getValue();
      foreach ($allowed_options as $option) {
        $value = $option['value'];
        $visibilities[$value] = TRUE;
      }      
    }
  }
}

/**
 * Provide a helper function to check for entity reference.
 *
 * @param int $group_id
 *   The group id.
 */
function blp_flex_groups_get_referenced_group($group_id) {

  $field_available = FALSE;

  if (blp_flex_groups_check_for_field_in_bundle()) {

    $result = \Drupal::entityQuery('group')
    ->condition('type', 'blp_event')
    ->condition('field_group_blp_project', $group_id)
    ->execute();

    if ($result) {
      $field_available = TRUE;
    }
    
  }

  return $field_available;

}

/**
 * Check if a bundle holds a certain field.
 */
function blp_flex_groups_check_for_field_in_bundle($entity_type = 'group', $bundle = 'blp_event', $field_name = 'field_group_blp_project') {
  $all_bundle_fields = \Drupal::service('entity_field.manager')->getFieldDefinitions($entity_type, $bundle);
  return isset($all_bundle_fields[$field_name]);
}

/**
 * Implements hook_node_access().
 */
function blp_flex_groups_node_access(NodeInterface $node, $op, AccountInterface $account) {
  return EntityAccessHelper::getEntityAccessResult($node, $op, $account);
}

/**
 * Implements hook_implements_alter().
 */
function blp_flex_groups_implements_alter(&$implementations, $hook) {
  if ($hook == 'views_query_alter') {
    $group = $implementations['blp_flex_groups'];
    unset($implementations['social_group_flexible_group']);
    unset($implementations['blp_flex_groups']);
    $implementations['blp_flex_groups'] = $group;
  }
}

/**
 * Implements hook_views_query_alter().
 *
 * Hide flexible groups everywhere when the current user cant see it.
 */
function blp_flex_groups_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if (empty($view->rowPlugin) || !($view->rowPlugin instanceof EntityRow) || $view->rowPlugin->getEntityTypeId() !== 'group') {
    return;
  }

  $flexible_groups = blp_flex_groups_get_flexible_group_types();

  $account = \Drupal::currentUser();

  if (!$account->isAnonymous()) {
    // Don't trigger page cache, this will cache it for AN
    // but with LU data.
    // Dynamic page cache handles this.
    \Drupal::service('page_cache_kill_switch')->trigger();
  }

  // Don't check, they can see it all.
  if ($account->hasPermission('manage all groups')) {
    return;
  }

  // Let's build our join with the allowed visibility data.
  $configuration = [
    'type'       => 'LEFT',
    'table'      => 'group__field_flexible_group_visibility',
    'field'      => 'entity_id',
    'left_table' => 'groups_field_data',
    'left_field' => 'id',
    'operator'   => '=',
  ];

  $alias = 'groups_field_flexible_group_visibility';

  /** @var \Drupal\views\Plugin\views\query\Sql $query */
  $join = Views::pluginManager('join')->createInstance('standard', $configuration);
  $rel = $query->addRelationship($alias, $join, 'groups_field_data');
  $query->addTable('group__field_flexible_group_visibility', $rel, $join, $alias);

  /** @var \Drupal\views\Plugin\views\query\Sql $query */
  $current_where = count($query->where);

  // Make sure we add one new group with a where clause.
  $new_where = $current_where + 1;

  // We need to add our group by using a query tag.
  // Otherwise views doesn't accept it.
  $query->addTag('flexible_group_by');

  // AN users can only see flexible groups that are public.
  if ($account->isAnonymous()) {
    // Add context so for AN it will have a different cache.
    $view->element['#cache']['contexts'][] = 'user.roles:anonymous';
    $query->setGroupOperator('OR');
    // Secret group also alters the query, so lets do it better.
    if (\Drupal::moduleHandler()->moduleExists('social_group_secret')) {
      $query->addWhere(1, 'groups_field_data.type', ['flexible_group','blp_event','blp_project'], 'NOT IN');
      $query->addWhere(2, 'groups_field_data.type', [
	'blp_project',
        'blp_event',        
	'flexible_group',
        'secret_group',
        'closed_group',
        'open_group',
      ], 'NOT IN');
      $query->addWhere($new_where, 'field_flexible_group_visibility_value', ['public'], 'IN');
      $query->addWhere($new_where, 'groups_field_data.type', ['flexible_group','blp_project','blp_event'], 'IN');
      return;
    }

    // Make sure we remove flexible group as an option so only public groups
    // are part of this clause.
    $query->addWhere($current_where, 'groups_field_data.type', ['flexible_group','blp_project','blp_event'], 'NOT IN');

    // OR it is a flexible group but than we only want groups
    // that have the public content visibility for AN users.
    $query->setWhereGroup('AND', $new_where);
    $query->addWhere($new_where, 'field_flexible_group_visibility_value', ['public'], 'IN');
    $query->addWhere($new_where, 'groups_field_data.type', ['flexible_group','blp_event','blp_project'], 'IN');
    return;
  }

  // We need to render this as an OR operator now.
  // Because we want to allow the other filters to still take place.
  $query->setGroupOperator('OR');

  // First we remove flexible groups from the existing where clause.
  // We need this, otherwise there won't be any open, closed, public groups
  // showed.
  $query->addWhere($current_where, 'groups_field_data.type', ['flexible_group','blp_event','blp_project'], 'NOT IN');

  // In this case we are LU, we already checked if we have the manage groups
  // permission. So lets add a check to remove flexible groups
  // that have the group_visibility set to members for groups we are a
  // member of.
  $my_groups = \Drupal::service('social_group.helper_service')
    ->getAllGroupsForUser($account->id());
  $view->element['#cache']['contexts'][] = 'user';
  // Make sure this block gets refreshed for a user if the group membership
  // changed for this user.
  if (!empty($my_groups)) {
    $view->element['#cache']['tags'][] = 'group_content_list:plugin:group_membership:entity:' . $account->id();
    $query->setWhereGroup('AND', $new_where);
    $query->addWhere($new_where, 'field_flexible_group_visibility_value', ['members'], 'IN');
    $query->addWhere($new_where, 'groups_field_data.id', $my_groups, 'IN');
  }
  $extra_where = $new_where + 1;
  // OR we add a new Where clause for any community group visibility related
  // groups. Because any LU can see those for the community, regardless of
  // their memberships.
  $query->setWhereGroup('AND', $extra_where);
  $query->addWhere($extra_where, 'field_flexible_group_visibility_value', [
    'public',
    'community',
  ], 'IN');
}



